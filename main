import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from scipy import special as sp


def qfunc(x):
    return 0.5 - 0.5 * sp.erf(x / np.sqrt(2))


class QPSKModulator:
    def __init__(self):
        self.symbol_map = {
            (0, 0): 1 + 1j,
            (0, 1): -1 + 1j,
            (1, 0): 1 - 1j,
            (1, 1): -1 - 1j
        }
        self.inverse_symbol_map = {v: k for k, v in self.symbol_map.items()}

    def modulate(self, bits):
        if len(bits) % 2 != 0:
            raise ValueError("Количество бит должно быть кратно 2 для QPSK")
        symbols = [self.symbol_map[(bits[i], bits[i + 1])] for i in range(0, len(bits), 2)]
        return np.array(symbols)

    def demodulate(self, symbols):
        bits = []
        for symbol in symbols:
            closest_symbol = min(self.symbol_map.values(), key=lambda x: abs(x - symbol))
            bits.extend(self.inverse_symbol_map[closest_symbol])
        return np.array(bits)

    def add_awgn(self, symbols, snr_db, M):
        snr_linear = 10 ** (snr_db / 10)
        noise_power = 0.3 / snr_linear
        noise = np.sqrt(noise_power/2) * (np.random.randn(len(symbols)) + 1j * np.random.randn(len(symbols)))
        return symbols + noise


class QAM16Modulator:
    def __init__(self):
        a = 1
        self.symbol_map = {
            (0, 0, 0, 0): a + a * 1j, (0, 0, 0, 1): -a + a * 1j,
            (0, 0, 1, 0): a - a * 1j, (0, 0, 1, 1): -a - a * 1j,
            (0, 1, 0, 0): 3 * a + a * 1j, (0, 1, 0, 1): -3 * a + a * 1j,
            (0, 1, 1, 0): 3 * a - a * 1j, (0, 1, 1, 1): -3 * a - a * 1j,
            (1, 0, 0, 0): a + 3 * a * 1j, (1, 0, 0, 1): -a + 3 * a * 1j,
            (1, 0, 1, 0): a - 3 * a * 1j, (1, 0, 1, 1): -a - 3 * a * 1j,
            (1, 1, 0, 0): 3 * a + 3 * a * 1j, (1, 1, 0, 1): -3 * a + 3 * a * 1j,
            (1, 1, 1, 0): 3 * a - 3 * a * 1j, (1, 1, 1, 1): -3 * a - 3 * a * 1j
        }
        self.inverse_symbol_map = {v: k for k, v in self.symbol_map.items()}

    def modulate(self, bits):
        if len(bits) % 4 != 0:
            raise ValueError("Количество бит должно быть кратно 4 для 16-QAM")
        symbols = [self.symbol_map[tuple(bits[i:i + 4])] for i in range(0, len(bits), 4)]
        return np.array(symbols)

    def demodulate(self, symbols):
        bits = []
        for symbol in symbols:
            closest_symbol = min(self.symbol_map.values(), key=lambda x: abs(x - symbol))
            bits.extend(self.inverse_symbol_map[closest_symbol])
        return np.array(bits)

    def add_awgn(self, symbols, snr_db, M):
        snr_linear = 10 ** (snr_db / 10)
        noise_power = 1 / snr_linear
        noise = np.sqrt(noise_power / 2) * (np.random.randn(len(symbols)) + 1j * np.random.randn(len(symbols)))
        return symbols + noise


class QAM64Modulator:
    def __init__(self):
        a = 1
        # Картирование символов для 64-QAM (часть значений для примера)
        self.symbol_map = {
            (0, 0, 0, 0, 0, 0): -7 * a + 7 * a * 1j, (0, 0, 0, 0, 0, 1): -7 * a + 5 * a * 1j,
            (0, 0, 0, 0, 1, 0): -7 * a + 3 * a * 1j, (0, 0, 0, 0, 1, 1): -7 * a + 1 * a * 1j,
            (0, 0, 0, 1, 0, 0): -7 * a - 1 * a * 1j, (0, 0, 0, 1, 0, 1): -7 * a - 3 * a * 1j,
            (0, 0, 0, 1, 1, 0): -7 * a - 5 * a * 1j, (0, 0, 0, 1, 1, 1): -7 * a - 7 * a * 1j,
            (0, 0, 1, 0, 0, 0): -5 * a + 7 * a * 1j, (0, 0, 1, 0, 0, 1): -5 * a + 5 * a * 1j,
            (0, 0, 1, 0, 1, 0): -5 * a + 3 * a * 1j, (0, 0, 1, 0, 1, 1): -5 * a + 1 * a * 1j,
            (0, 0, 1, 1, 0, 0): -5 * a - 1 * a * 1j, (0, 0, 1, 1, 0, 1): -5 * a - 3 * a * 1j,
            (0, 0, 1, 1, 1, 0): -5 * a - 5 * a * 1j, (0, 0, 1, 1, 1, 1): -5 * a - 7 * a * 1j,
            (0, 1, 0, 0, 0, 0): -3 * a + 7 * a * 1j, (0, 1, 0, 0, 0, 1): -3 * a + 5 * a * 1j,
            (0, 1, 0, 0, 1, 0): -3 * a + 3 * a * 1j, (0, 1, 0, 0, 1, 1): -3 * a + 1 * a * 1j,
            (0, 1, 0, 1, 0, 0): -3 * a - 1 * a * 1j, (0, 1, 0, 1, 0, 1): -3 * a - 3 * a * 1j,
            (0, 1, 0, 1, 1, 0): -3 * a - 5 * a * 1j, (0, 1, 0, 1, 1, 1): -3 * a - 7 * a * 1j,
            (0, 1, 1, 0, 0, 0): -1 * a + 7 * a * 1j, (0, 1, 1, 0, 0, 1): -1 * a + 5 * a * 1j,
            (0, 1, 1, 0, 1, 0): -1 * a + 3 * a * 1j, (0, 1, 1, 0, 1, 1): -1 * a + 1 * a * 1j,
            (0, 1, 1, 1, 0, 0): -1 * a - 1 * a * 1j, (0, 1, 1, 1, 0, 1): -1 * a - 3 * a * 1j,
            (0, 1, 1, 1, 1, 0): -1 * a - 5 * a * 1j, (0, 1, 1, 1, 1, 1): -1 * a - 7 * a * 1j,
            (1, 0, 0, 0, 0, 0): 1 * a + 7 * a * 1j, (1, 0, 0, 0, 0, 1): 1 * a + 5 * a * 1j,
            (1, 0, 0, 0, 1, 0): 1 * a + 3 * a * 1j, (1, 0, 0, 0, 1, 1): 1 * a + 1 * a * 1j,
            (1, 0, 0, 1, 0, 0): 1 * a - 1 * a * 1j, (1, 0, 0, 1, 0, 1): 1 * a - 3 * a * 1j,
            (1, 0, 0, 1, 1, 0): 1 * a - 5 * a * 1j, (1, 0, 0, 1, 1, 1): 1 * a - 7 * a * 1j,
            (1, 0, 1, 0, 0, 0): 3 * a + 7 * a * 1j, (1, 0, 1, 0, 0, 1): 3 * a + 5 * a * 1j,
            (1, 0, 1, 0, 1, 0): 3 * a + 3 * a * 1j, (1, 0, 1, 0, 1, 1): 3 * a + 1 * a * 1j,
            (1, 0, 1, 1, 0, 0): 3 * a - 1 * a * 1j, (1, 0, 1, 1, 0, 1): 3 * a - 3 * a * 1j,
            (1, 0, 1, 1, 1, 0): 3 * a - 5 * a * 1j, (1, 0, 1, 1, 1, 1): 3 * a - 7 * a * 1j,
            (1, 1, 0, 0, 0, 0): 5 * a + 7 * a * 1j, (1, 1, 0, 0, 0, 1): 5 * a + 5 * a * 1j,
            (1, 1, 0, 0, 1, 0): 5 * a + 3 * a * 1j, (1, 1, 0, 0, 1, 1): 5 * a + 1 * a * 1j,
            (1, 1, 0, 1, 0, 0): 5 * a - 1 * a * 1j, (1, 1, 0, 1, 0, 1): 5 * a - 3 * a * 1j,
            (1, 1, 0, 1, 1, 0): 5 * a - 5 * a * 1j, (1, 1, 0, 1, 1, 1): 5 * a - 7 * a * 1j,
            (1, 1, 1, 0, 0, 0): 7 * a + 7 * a * 1j, (1, 1, 1, 0, 0, 1): 7 * a + 5 * a * 1j,
            (1, 1, 1, 0, 1, 0): 7 * a + 3 * a * 1j, (1, 1, 1, 0, 1, 1): 7 * a + 1 * a * 1j,
            (1, 1, 1, 1, 0, 0): 7 * a - 1 * a * 1j, (1, 1, 1, 1, 0, 1): 7 * a - 3 * a * 1j,
            (1, 1, 1, 1, 1, 0): 7 * a - 5 * a * 1j, (1, 1, 1, 1, 1, 1): 7 * a - 7 * a * 1j
        }
        self.inverse_symbol_map = {v: k for k, v in self.symbol_map.items()}

    def modulate(self, bits):
        if len(bits) % 6 != 0:
            raise ValueError("Количество бит должно быть кратно 6 для 64-QAM")
        symbols = [self.symbol_map[tuple(bits[i:i + 6])] for i in range(0, len(bits), 6)]
        return np.array(symbols)

    def demodulate(self, symbols):
        bits = []
        for symbol in symbols:
            closest_symbol = min(self.symbol_map.values(), key=lambda x: abs(x - symbol))
            bits.extend(self.inverse_symbol_map[closest_symbol])
        return np.array(bits)

    def add_awgn(self, symbols, snr_db, M):
        snr_linear = 10 ** (snr_db / 10)
        noise_power = 1.4 / snr_linear
        noise = np.sqrt(noise_power / 2) * (np.random.randn(len(symbols)) + 1j * np.random.randn(len(symbols)))
        return symbols + noise


SNR_db_range = range(-15, 5)  # Диапазон значений SNR (от -1 до 14 dB)
num_trials = 30000  # Количество переданных символов для каждого значения SNR


# Функция для моделирования BER
def simulate_ber(modulator, q, M):
    BER = []
    BER_THEOR = []
    for snr_db in SNR_db_range:
        bit_errors_total = 0
        total_bits = 0
        y = 10 ** (snr_db / 10)

        for _ in range(num_trials):
            bits = np.random.randint(0, 2, size=M)  # Случайное сообщение
            symbols = modulator.modulate(bits)  # Модуляция сообщения
            noisy_symbols = modulator.add_awgn(symbols, snr_db, M)  # Добавление шума
            demodulated_bits = modulator.demodulate(noisy_symbols)  # Демодуляция

            # Подсчёт количества ошибок
            bit_errors = np.sum(bits != demodulated_bits)
            bit_errors_total += bit_errors
            total_bits += len(bits)

        # Расчёт битовой ошибки (BER) и теоретической BER
        ber = bit_errors_total / total_bits
        BER.append(ber)
        BER_THEOR.append(1 - (1 - 2 * qfunc(np.sqrt(3 * y / (M - 1))) ** 2))


    return BER, BER_THEOR


plt.figure(figsize=(15, 10))
# Моделирование и построение графиков для QPSK
modulator_qpsk = QPSKModulator()
ber_qpsk, ber_teor_qpsk= simulate_ber(modulator_qpsk, q=4, M=2)

plt.subplot(2, 2, 1)

plt.plot(SNR_db_range, ber_qpsk, marker='o', label='Simulation QPSK BER')
plt.plot(SNR_db_range, ber_teor_qpsk, marker='s', linestyle='--', label='Theoretical QPSK BER')

plt.xlabel('SNR (dB)')
plt.ylabel('Bit Error Rate (BER)')
plt.grid(True)
plt.legend()
plt.title('QPSK')
plt.yscale('log')

# Моделирование и построение графиков для 16-QAM
modulator_qam16 = QAM16Modulator()
ber_qam16, ber_teor_qam16 = simulate_ber(modulator_qam16, q=16, M=4)

plt.subplot(2, 2, 2)

plt.plot(SNR_db_range, ber_qam16, marker='o', label='Simulation 16-QAM BER')
plt.plot(SNR_db_range, ber_teor_qam16, marker='s', linestyle='--', label='Theoretical 16-QAM BER')

plt.xlabel('SNR (dB)')
plt.ylabel('Bit Error Rate (BER)')
plt.grid(True)
plt.legend()
plt.title('QAM16')
plt.yscale('log')

# Моделирование и построение графиков для 64-QAM
modulator_qam64 = QAM64Modulator()
ber_qam64, ber_teor_qam64= simulate_ber(modulator_qam64, q=64, M=6)

plt.subplot(2, 2, 3)

plt.plot(SNR_db_range, ber_qam64, marker='o', label='Simulation 64-QAM BER')
plt.plot(SNR_db_range, ber_teor_qam64, marker='s', linestyle='--', label='Theoretical 64-QAM BER')

# Настройки графика
plt.xlabel('SNR (dB)')
plt.ylabel('Bit Error Rate (BER)')
plt.grid(True)
plt.legend()
plt.title('QAM64')
plt.yscale('log')  # Логарифмическая шкала для BER
plt.show()
